// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /v1/accounts/{account-Id}/balances_get for http method type GET in rest-assured framework

RoostTestHash=bbb4b07de6


*/

// ********RoostGPT********
package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;

public class BalancesGetTest {
  
    @Test  
    public void balancesGet_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader(getFilePath()))) {  
            Map<String, String> map = getHeaderDataMap(reader);
  
            Response response = getResponse(map);
         
            if (response.statusCode() == 200) {
                System.out.println("Description: Success");
                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
  
    private String getFilePath() {
      return "src" + File.separator + "test" + File.separator + "java" + File.separator + "org" 
          + File.separator + "commonjava" + File.separator + "maven" + File.separator + "ext" 
          + File.separator + "RoostTest" + File.separator + "balancesGetTest.csv";
    }
  
    private Map<String, String> getHeaderDataMap(BufferedReader reader) throws IOException {
      String headerLine = reader.readLine();  
      String[] headers = headerLine.split(",");  
  
      String line = reader.readLine();
      String[] data = line.split(",");  
  
      // Create a map of header to data  
      Map<String, String> map = new HashMap<>();  
      for (int i = 0; i < headers.length; i++) {  
          map.put(headers[i], data[i]);  
      }
      return map;
    }
  
    private Response getResponse(Map<String, String> map) {
      return given()
          .pathParam("account-Id", map.getOrDefault("account-Id", ""))
          .pathParam("Consent-ID", map.getOrDefault("Consent-ID", ""))
          .pathParam("Content-Type", map.getOrDefault("Content-Type", ""))
          .pathParam("PSU-ID", map.getOrDefault("PSU-ID", ""))
          .when()
          .get("/v1/accounts/{account-Id}/balances")  
          .then()
          .extract().response();
    }
  
    private void validateResponse(Response response) {
      if (response.jsonPath().get("balances") != null) {    
          for (int i = 0; i < response.jsonPath().getList("balances").size(); i++) {    
              validateBalance(response, i);
          }
          assertThat(response.jsonPath().getList("balances"), instanceOf(List.class));
      }
    }
  
    private void validateBalance(Response response, int i) {
        if (response.jsonPath().get("balances["+ i +"].balanceType") != null) {
            assertThat(response.jsonPath().get("balances["+ i +"].balanceType"), instanceOf(String.class));  
        }
        if (response.jsonPath().get("balances["+ i +"].lastChangeDateTime") != null) {
            assertThat(response.jsonPath().get("balances["+ i +"].lastChangeDateTime"), instanceOf(String.class));  
        }
        if (response.jsonPath().get("balances["+ i +"].referenceDate") != null) {
            assertThat(response.jsonPath().get("balances["+ i +"].referenceDate"), instanceOf(String.class));  
        }
        if (response.jsonPath().get("balances["+ i +"].balanceAmount") != null) {    
            validateBalanceAmount(response, i);
        }
    }
  
    private void validateBalanceAmount(Response response, int i) {
        if (response.jsonPath().get("balances["+ i +"].balanceAmount.currency") != null) {
            assertThat(response.jsonPath().get("balances["+ i +"].balanceAmount.currency"), instanceOf(String.class));  
        }
        if (response.jsonPath().get("balances["+ i +"].balanceAmount.amount") != null) {
            assertThat(response.jsonPath().get("balances["+ i +"].balanceAmount.amount"), instanceOf(Integer.class));  
        }
    }
}
