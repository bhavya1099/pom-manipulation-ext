// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /v1/accounts/{account-Id}_get for http method type GET in rest-assured framework

RoostTestHash=58d301af11


*/

// ********RoostGPT********
package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.*;

public class AccountsAccountIdGetTest {

    @Test
    public void accountsAccountIdGetTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/accounts_account-IdGetTest.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given().
                        pathParam("accountId", map.get("accountId") != null ? map.get("accountId") : "").
                        when().
                        get("/v1/accounts/{accountId}").
                        then().extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().get("account.resourceId"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.iban"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.bic"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.pan"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.bban"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.currency"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.accountType"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.cashAccountType"), instanceOf(String.class));
        assertThat(response.jsonPath().get("account.name"), instanceOf(String.class));
        assertThat(response.jsonPath().getList("account.balances"), instanceOf(List.class));
        assertThat(response.jsonPath().get("account._links.type"), instanceOf(Object.class));
        assertThat(response.jsonPath().get("account._links.properties"), notNullValue());
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().get("error"), notNullValue());
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.jsonPath().get("error"), notNullValue());
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.jsonPath().get("error"), notNullValue());
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
    }
}
