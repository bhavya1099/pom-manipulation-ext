// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /v1/accounts/{account-Id}_get for http method type GET in rest-assured framework

RoostTestHash=58d301af11


*/

// ********RoostGPT********
package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class AccountsAccountIdGetTest {

    @Test
    public void accountsAccountIdGet_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader(Paths.get("src/test/java/org/commonjava/maven/ext/RoostTest/accounts_account-IdGetTest.csv").toString()))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("account-Id", map.getOrDefault("account-Id", ""))
                        .pathParam("Consent-ID", map.getOrDefault("Consent-ID", ""))
                        .pathParam("withBalance", map.getOrDefault("withBalance", ""))
                        .pathParam("Content-Type", map.getOrDefault("Content-Type", ""))
                        .pathParam("PSU-ID", map.getOrDefault("PSU-ID", ""))
                        .when()
                        .get("/v1/accounts/{account-Id}")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                throw new IllegalArgumentException("Invalid status code: " + response.statusCode());
        }
    }

    private void validateSuccessResponse(Response response) {
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("account.iban"), instanceOf(String.class));
        // Add other assertions for success response
    }

    private void validateErrorResponse(Response response) {
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("error"), notNullValue());
        // Add other assertions for error response
    }

    private void validateNotFoundResponse(Response response) {
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("message"), equalTo("Resource not found"));
        // Add other assertions for not found response
    }

    private void validateUnprocessableEntityResponse(Response response) {
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("message"), containsString("Unprocessable entity"));
        // Add other assertions for unprocessable entity response
    }
}
